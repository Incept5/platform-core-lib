
name: Build and Publish to JitPack

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  JAVA_VERSION: '21'
  JAVA_DISTRIBUTION: 'temurin'

jobs:
  build-and-test:
    name: Build and Test
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up JDK ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: ${{ env.JAVA_DISTRIBUTION }}

      - name: Setup Gradle
        uses: gradle/gradle-build-action@v3
        with:
          gradle-home-cache-cleanup: true

      - name: Validate Gradle wrapper
        uses: gradle/wrapper-validation-action@v2

      - name: Build and Test
        run: ./gradlew clean build --no-daemon --stacktrace

      - name: Upload Test Results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results
          path: build/test-results/
          retention-days: 30

      - name: Upload Build Reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: build-reports
          path: build/reports/
          retention-days: 30

  publish-to-jitpack:
    name: Publish to JitPack
    runs-on: ubuntu-latest
    needs: build-and-test
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    outputs:
      version: ${{ steps.version.outputs.version }}
      
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          # Fetch full history for proper tagging
          fetch-depth: 0

      - name: Set up JDK ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: ${{ env.JAVA_DISTRIBUTION }}

      - name: Setup Gradle
        uses: gradle/gradle-build-action@v3
        with:
          gradle-home-cache-cleanup: true

      - name: Set Version Based on Branch
        id: version
        run: |
          if [ "${{ github.ref_name }}" == "main" ]; then
            # For main branch, use a release version with run number
            VERSION="1.0.${{ github.run_number }}"
            IS_SNAPSHOT=false
            echo "Using release version: ${VERSION}"
          else
            # For feature branches, use a SNAPSHOT version
            VERSION="1.0.0-SNAPSHOT"
            IS_SNAPSHOT=true
            echo "Using snapshot version: ${VERSION}"
          fi
          
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "is_snapshot=${IS_SNAPSHOT}" >> $GITHUB_OUTPUT
          
          # Also set as environment variables for subsequent steps
          echo "VERSION=${VERSION}" >> $GITHUB_ENV
          echo "IS_SNAPSHOT=${IS_SNAPSHOT}" >> $GITHUB_ENV

      - name: Build with Version
        run: |
          echo "Building with version: ${VERSION}"
          ./gradlew clean build -Pversion=${VERSION} --no-daemon --stacktrace

      - name: Publish to Local Maven Repository
        run: |
          echo "Publishing with version: ${VERSION}"
          ./gradlew publishToMavenLocal -Pversion=${VERSION} --no-daemon --stacktrace

      - name: Verify Local Publication
        run: |
          echo "Verifying local publication..."
          echo "Maven repository location: $HOME/.m2/repository"
          echo "Using version: ${VERSION}"
          
          # List all artifacts in the local Maven repository
          echo "All artifacts in Maven repository:"
          find $HOME/.m2/repository/com/github/incept5 -type f -name "*.jar" 2>/dev/null | sort || echo "No artifacts found yet"
          
          # Check for the specific artifact
          EXPECTED_JAR="$HOME/.m2/repository/com/github/incept5/platform-core-lib/${VERSION}/platform-core-lib-${VERSION}.jar"
          
          if [ ! -f "$EXPECTED_JAR" ]; then
            echo "platform-core-lib JAR not found at expected path: $EXPECTED_JAR"
            
            # Check if the directory exists
            if [ -d "$HOME/.m2/repository/com/github/incept5/platform-core-lib" ]; then
              echo "Available versions for platform-core-lib:"
              ls -la "$HOME/.m2/repository/com/github/incept5/platform-core-lib/" || echo "Directory exists but is empty"
            fi
            
            # Try to find it elsewhere
            echo "Searching for platform-core-lib JAR:"
            find $HOME/.m2/repository -name "platform-core-lib-*.jar" 2>/dev/null | sort || echo "No platform-core-lib JARs found"
            
            echo "ERROR: Failed to publish platform-core-lib JAR"
            exit 1
          else
            echo "‚úÖ Successfully verified platform-core-lib JAR at: $EXPECTED_JAR"
          fi

      - name: Create and Push Git Tag
        if: env.IS_SNAPSHOT == 'false'
        run: |
          echo "Creating tag for version: ${VERSION}"
          
          # Configure git
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          
          # Check if tag already exists
          if git rev-parse "${VERSION}" >/dev/null 2>&1; then
            echo "Tag ${VERSION} already exists, skipping tag creation"
          else
            echo "Creating new tag ${VERSION}"
            git tag -a "${VERSION}" -m "Release version ${VERSION}"
            git push origin "${VERSION}"
            echo "‚úÖ Successfully created and pushed tag ${VERSION}"
          fi

      - name: Trigger JitPack Build
        if: env.IS_SNAPSHOT == 'false'
        run: |
          echo "Triggering JitPack build for version ${VERSION}"
          
          # Trigger JitPack build by making a request to the JitPack URL with the version tag
          echo "Making initial request to JitPack..."
          curl -s "https://jitpack.io/com/github/incept5/platform-core-lib/${VERSION}/platform-core-lib-${VERSION}.pom" || true
          
          echo "JitPack build triggered for version ${VERSION}"
          echo "Library will be available at: https://jitpack.io/#incept5/platform-core-lib/${VERSION}"

      - name: Wait and Verify JitPack Build
        if: env.IS_SNAPSHOT == 'false'
        run: |
          echo "Waiting for JitPack to process the build..."
          
          # Wait for JitPack to process the build
          sleep 180  # Wait 3 minutes for JitPack to process
          
          echo "Verifying JitPack build status..."
          
          # Verify the JAR availability
          JAR_STATUS=$(curl -s -o /dev/null -w "%{http_code}" "https://jitpack.io/com/github/incept5/platform-core-lib/${VERSION}/platform-core-lib-${VERSION}.jar")
          echo "JAR Status Code: $JAR_STATUS"
          
          # Verify POM availability
          POM_STATUS=$(curl -s -o /dev/null -w "%{http_code}" "https://jitpack.io/com/github/incept5/platform-core-lib/${VERSION}/platform-core-lib-${VERSION}.pom")
          echo "POM Status Code: $POM_STATUS"
          
          # Report results
          if [ "$JAR_STATUS" -eq 200 ]; then
            echo "‚úÖ JAR successfully published to JitPack!"
          else
            echo "‚ö†Ô∏è  JAR not found on JitPack yet. Status code: $JAR_STATUS"
          fi
          
          if [ "$POM_STATUS" -eq 200 ]; then
            echo "‚úÖ POM successfully published to JitPack!"
          else
            echo "‚ö†Ô∏è  POM not found on JitPack yet. Status code: $POM_STATUS"
          fi
          
          # Final summary
          if [ "$JAR_STATUS" -eq 200 ] && [ "$POM_STATUS" -eq 200 ]; then
            echo ""
            echo "üéâ Platform Core Library successfully published to JitPack!"
            echo ""
            echo "üì¶ To use this library in your project:"
            echo ""
            echo "Gradle (Kotlin DSL):"
            echo "repositories {"
            echo "    maven { url = uri(\"https://jitpack.io\") }"
            echo "}"
            echo "dependencies {"
            echo "    implementation(\"com.github.incept5:platform-core-lib:${VERSION}\")"
            echo "}"
            echo ""
            echo "Gradle (Groovy):"
            echo "repositories {"
            echo "    maven { url 'https://jitpack.io' }"
            echo "}"
            echo "dependencies {"
            echo "    implementation 'com.github.incept5:platform-core-lib:${VERSION}'"
            echo "}"
            echo ""
            echo "Maven:"
            echo "<repository>"
            echo "    <id>jitpack.io</id>"
            echo "    <url>https://jitpack.io</url>"
            echo "</repository>"
            echo "<dependency>"
            echo "    <groupId>com.github.incept5</groupId>"
            echo "    <artifactId>platform-core-lib</artifactId>"
            echo "    <version>${VERSION}</version>"
            echo "</dependency>"
            echo ""
          else
            echo ""
            echo "‚ö†Ô∏è  Library may not be fully available yet on JitPack."
            echo "This is normal as JitPack may take additional time to process the build."
            echo ""
            echo "üîç Check build status at: https://jitpack.io/#incept5/platform-core-lib/${VERSION}"
            echo "üìã View build logs at: https://jitpack.io/com/github/incept5/platform-core-lib/${VERSION}/build.log"
            echo ""
            echo "If the build fails, ensure:"
            echo "1. The repository is public"
            echo "2. The tag ${VERSION} exists and is accessible"
            echo "3. The build.gradle.kts file is properly configured for JitPack"
          fi

  update-readme-badge:
    name: Update README Badge
    runs-on: ubuntu-latest
    needs: publish-to-jitpack
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Update README with new version
        run: |
          VERSION="${{ needs.publish-to-jitpack.outputs.version }}"
          echo "Updating README.md with version ${VERSION}"
          
          # Update CircleCI badge to GitHub Actions badge
          sed -i 's/\[\!\[CircleCI\].*\]/[![Build and Publish](https:\/\/github.com\/incept5\/platform-core-lib\/actions\/workflows\/build-and-publish.yml\/badge.svg)]/g' README.md
          
          # Update any version references in README if they exist
          # This is optional - only if you want to auto-update version examples
          echo "README.md updated with GitHub Actions badge"

      - name: Commit README changes
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          
          if git diff --quiet; then
            echo "No changes to commit"
          else
            git add README.md
            git commit -m "Update README.md with GitHub Actions badge [skip ci]"
            git push
            echo "‚úÖ README.md updated with GitHub Actions badge"
          fi
